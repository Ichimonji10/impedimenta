# Documentation at: http://redmine.lighttpd.net/projects/lighttpd/wiki/Docs
# Check for errors: lighttpd -t -f /path/to/config

# Load Modules
# ============
#
# By default, the following modules are loaded:
#
# * mod_indexfile
# * mod_dirlisting
# * mod_staticfile
#
# You can load modules with a directive like the following:
#
#     server.modules += ("mod_fastcgi", "mod_alias")

server.modules += ("mod_proxy", "mod_redirect", "mod_status")

# Debug
# =====
#
# Always useful!
#
#debug.log-file-not-found = "enable"
#debug.log-request-handling = "enable"
#debug.log-state-handling = "enable"
#debug.log-ssl-noise = "enable"

# Basic Settings
# ==============
#
# If you set server.username or server.groupname, lighttpd will require root
# permissions during startup.

server.pid-file       =  "/var/run/lighttpd.pid"
server.errorlog       =  "/var/log/lighttpd/error.log"
server.document-root  = "/srv/http/"
server.username       =  "http"
server.groupname      =  "http"
server.port           =  80

# Some things just shouldn't be served...
dir-listing.activate = "disable"
static-file.exclude-extensions = (".py", ".pyc", ".fcgi")

# Some files need to be treated specially by lighttpd.
index-file.names = ("index.html")
mimetype.assign = (
    ".css"       =>  "text/css",
    ".html"      =>  "text/html",
    ".jpg"       =>  "image/jpeg",
    ".markdown"  =>  "text/plain",
    ".md"        =>  "text/plain", # markdown
    ".mkv"       =>  "video/x-matroska",
    ".mp4"       =>  "video/mp4",
    ".png"       =>  "image/png",
    ".rst"       =>  "text/plain", # reStructuredText
    ".txt"       =>  "text/plain",
    ""           =>  "application/octet-stream"
)

# vhosts
# ======
#
# socket 80: HTTP
# socket 443: HTTPS
#
# The ssl.pemfile and ssl.ca-file options can be moved inside the appropriate
# $HTTP["host"] sections. Doing so enables "server name indication". Even so,
# lighttpd still requires a default .pem file, placed outside of any
# $HTTP["host] block.
# 
# https://redmine.lighttpd.net/projects/1/wiki/Docs_SSL#Server-Name-Indication-SNI

$SERVER["socket"] == ":80" {
    $HTTP["host"] == "example.com" {
        server.document-root = "/srv/http/example.com"
    } else $HTTP["host"] == "sub.example.com" {
        url.redirect = (
            "^/(.*)" => "https://sub.example.com/$1"
        )
    }
    $HTTP["remoteip"] == "192.168.1.0/24" {
        status.status-url = "/server-status"
    }
} else $SERVER["socket"] == ":443" {
    ssl.engine  = "enable"
    ssl.pemfile = "/etc/lighttpd/ssl/sub.example.com.pem"
    ssl.ca-file = "/etc/lighttpd/ssl/CA_intermediate_cert.pem"

    $HTTP["host"] == "sub.example.com" {
        # This proxying is completely transparent to clients.
        proxy.server = (
            # File extension or prefix, e.g. ".jsp". "" matches all requests.
            "" => (
                # Specify multiple host+port pairs for load balancing.
                ("host" => "127.0.0.1", "port" => 4040)
            )
        )
        # Throttle non-local clients. 800 Kbps is enough for one movie at 500
        # Kbps and one music stream at 256 Kbps.
        $HTTP["remoteip"] != "192.168.1.0/24" {
            # max for all connections
            server.kbytes-per-second = 100
            # max for each individual connection
            #connection.kbytes-per-second = 123
        }
    }
}

# snippet: flup CGI server
# ========================

## URLs that do not match the given regex are forwarded to the FastCGI server.
#$HTTP["url"] !~ "^/static/" {
#    fastcgi.server = (
#        # url extension that causes an HTTP request to be handed off to this
#        # FastCGI server.
#        "/" => (
#            # You can load-balance a single FastCGI app between multiple
#            # servers. This string is just a label for that server, and it has
#            # little functional impact (affects logfile output?).
#            "localhost" => (
#                # contact FastCGI server over either TCP (host & port) or socket
#                # "socket" => "/home/user/mysite.sock",
#                "host" => "127.0.0.1",
#                "port" => 4000,
#                "check-local" => "disable",
#                # allows url extension "/" to be used
#                "fix-root-scriptname" => "enable",
#            )
#        ),
#    )
#}
