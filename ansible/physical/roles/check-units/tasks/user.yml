- name: Get passwd information about {{ item }}
  getent:
    database: passwd
    key: '{{ item }}'
    split: ':'

- name: "Set variable referencing {{ item }}'s ID"
  set_fact:
    check_units_id: "{{ getent_passwd[item][1] }}"

- name: "Set variable referencing {{ item }}'s home directory"
  set_fact:
    check_units_home: "{{ getent_passwd[item][4] }}"

- block:

  - name: Create ~/.local/bin/
    file:
      path: '{{ check_units_home }}/.local/bin'
      state: directory

  - name: Install script to check for failed units
    copy:
      src: check-units-user.sh
      dest: '{{ check_units_home }}/.local/bin/check-units.sh'
      mode: 0700

  - name: Install service to check for failed units
    template:
      src: check-units.service
      dest: '{{ check_units_home }}/.config/systemd/user/'

  - name: Install timer to check for failed units
    copy:
      src: check-units.timer
      dest: '{{ check_units_home }}/.config/systemd/user/'

  # XDG_RUNTIME_DIR must be set, or else the systemd module will be unable to
  # contact the user's DBus instance. In no particular order, see:
  #
  # * https://github.com/ansible/ansible/issues/27631
  # * https://stackoverflow.com/questions/34167257/can-i-control-a-user-systemd-using-systemctl-user-after-sudo-su-myuser
  # * https://uggedal.com/journal/ansible-systemd-user/
  # * https://unix.stackexchange.com/questions/346841/why-does-sudo-i-not-set-xdg-runtime-dir-for-the-target-user
  # * https://www.freedesktop.org/software/systemd/man/pam_systemd.html
  - name: Start and enable periodic checks for failed units
    systemd:
      name: check-units.timer
      state: started
      enabled: true
      user: true
      daemon_reload: true
    environment:
      XDG_RUNTIME_DIR: /run/user/{{ check_units_id }}

  become: true
  become_user: '{{ item }}'
