- block:

  - name: Install devtools (for makechrootpkg, etc.)
    pacman:
      name: devtools

  # A home directory is necessary so that aurutils can cache files in
  # `~/.cache/`, and so that per-user systemd units may be created. The user
  # module creates one by default.
  - name: Create {{ aur_user }}
    user:
      name: '{{ aur_user }}'
      shell: /usr/bin/bash
      home: '{{ aur_user_home }}'
      move_home: true
    notify: Lock password

  # Required by install-aurutils.sh. Possibly required by aurutils itself for
  # building packages, but this is unclear.
  - name: Give {{ aur_user }} passwordless sudo privileges
    template:
      src: aur-user
      dest: /etc/sudoers.d/{{ aur_user }}-user
      validate: 'visudo --check --file %s'
      mode: 0440

  - name: Remove references to aur-packager from /etc/sudoers
    lineinfile:
      path: /etc/sudoers
      regexp: '^aur-packager '
      state: absent
      validate: 'visudo --check --file %s'

  become: true

- name: Check if aurutils is installed
  command: pacman -Q aurutils
  changed_when: False
  check_mode: False
  failed_when: False
  register: result

- block:

  - name: Install aurutils from the AUR
    script: install-aurutils.sh
    become_user: '{{ aur_user }}'
    when: result.rc != 0
    register: result

  - name: Create /var/cache/pacman/aur/
    file:
      path: /var/cache/pacman/aur
      state: directory
      owner: '{{ aur_user }}'
      group: '{{ aur_user }}'
      mode: 0755

  - name: Create /var/cache/pacman/aur/aur.db.tar
    command: repo-add /var/cache/pacman/aur/aur.db.tar
    args:
      creates: /var/cache/pacman/aur/aur.db.tar
    become_user: '{{ aur_user }}'

  - name: Install /etc/pacman.d/aur.conf
    copy:
      src: aur.conf
      dest: /etc/pacman.d/aur.conf

  - name: Make /etc/pacman.conf include /etc/pacman.d/aur.conf
    lineinfile:
      path: /etc/pacman.conf
      line: Include = /etc/pacman.d/aur.conf
    register: result

  # If a repository is defined in /etc/pacman.conf, but that repository has never
  # been synced, then pacman will produce errors.
  - name: Sync aur repository
    command: pacman -Sy --config /etc/pacman.d/aur.conf
    when: result is changed

  become: true

- name: Get {{ aur_user }} lingering state
  command: loginctl --property Linger --value show-user {{ aur_user }}
  changed_when: false
  check_mode: false
  failed_when: false
  register: result

- name: Get passwd information about {{ aur_user }}
  getent:
    database: passwd
    key: '{{ aur_user }}'
    split: ':'

- block:

  - name: Create {{ aur_user_home }}/.config/systemd/user/
    file:
      path: '{{ aur_user_home }}/.config/systemd/user/'
      state: directory

  - name: Install units to periodically update AUR packages
    copy:
      src: config_systemd_user/
      dest: '{{ aur_user_home }}/.config/systemd/user/'

  - name: Enable lingering for {{ aur_user }}
    command: loginctl enable-linger {{ aur_user }}
    when: result.stdout != 'yes'

  # XDG_RUNTIME_DIR must be set, or else the systemd module will be unable to
  # contact the user's DBus instance. In no particular order, see:
  #
  # * https://github.com/ansible/ansible/issues/27631
  # * https://stackoverflow.com/questions/34167257/can-i-control-a-user-systemd-using-systemctl-user-after-sudo-su-myuser
  # * https://uggedal.com/journal/ansible-systemd-user/
  # * https://unix.stackexchange.com/questions/346841/why-does-sudo-i-not-set-xdg-runtime-dir-for-the-target-user
  # * https://www.freedesktop.org/software/systemd/man/pam_systemd.html
  - name: Start and enable timer to periodically update AUR packages
    systemd:
      name: update-packages.timer
      state: started
      enabled: true
      user: true
      daemon_reload: true
    environment:
      XDG_RUNTIME_DIR: /run/user/{{ getent_passwd[aur_user][1] }}

  become: true
  become_user: '{{ aur_user }}'

- include_tasks: package-and-install.yml
  with_items: '{{ aur_packages }}'
