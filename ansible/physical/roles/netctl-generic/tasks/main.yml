---
- name: Assert that required variables are defined
  assert:
    that: netctl_generic_external_if is defined

- block:

    - name: Install netctl
      pacman:
        name: netctl

    - name: Install "external" netctl profile
      template:
        src: external
        dest: /etc/netctl/external
      register: result
      notify: Restart external network interface

    # This task may look pointless when the systemd module can also enable and
    # disable units. However, netctl does more than systemd:
    #
    # * `netctl enable $profile` creates a netctl@${profile}.service unit, and
    #   then enables the service.
    # * `netctl disable $profile` deletes a netctl@${profile}.service unit, and
    #   then disables the service.
    # * `netctl reenable $profile` is a combination of `disable` and `enable`.
    #   It's especially useful for updating units. (`netctl enable $profile`
    #   will fail if a .service file already exists.)
    #
    # Thus, `netctl reenable` must be invoked before systemd can work with the
    # desired units.
    - name: Create or update netctl service
      command: netctl reenable external
      when: result is changed
      tags: skip_ansible_lint

    # Why enable this unit here, given that `netctl reenable $profile` enables
    # this unit? Well, what if this .service is disabled for some reason? The
    # `netctl reenable $profile` task won't fix that drift, because it executes
    # conditionally.
    - name: Start and enable netctl service
      systemd:
        name: netctl@external.service
        state: started
        enabled: true
        daemon_reload: true

  become: true
