# `.bash_profile` is only executed when you initially login to a machine,
# whether by console, ssh, or otherwise. `.bashrc` is executed every time you
# open a new command prompt, even if you're already logged in, and it should
# also be called by `.bash_profile`. `.bash_profile` is great for, say,
# automatically starting X (if your login manager doesn't do that already), or
# for printing out machine stats upon first login. `.bashrc` is great for just
# about everything else.

# If the shell is not running interactively, immediately return. This ensures
# that programs like scp are given a pristine environment.
[[ $- != *i* ]] && return

# This is a kludge.
if [ -n "$TMUX" ]; then
    export TERM=screen-256color
fi

alias d='dirs -v'
alias grep='grep --color=auto'
alias l='ls -1'
alias less='less -R'
alias ll='ls -lha'
alias ls='ls --color=auto --group-directories-first'
alias rm='rm -I'

git_branch() {
    (which git &>/dev/null && git branch 2>/dev/null || echo) \
    | grep '^*' \
    | awk '{$1=""; print substr($0, 2)}'
}

python_virtualenv() {
    basename "${VIRTUAL_ENV:-}"
}

# Set PS1.
#
# There's no reason to export PS1, because this specific PS1 variable is only of
# use to the current interactive bash process. It's not of use to other bash
# processes, or sub-processes like vim or git.
#
# `PS1='$(gen_ps1)'` seems marginally easier, but it's less powerful. Character
# sequences like \u are only treated specially when PS1 is evaluated.
#
# It's very easy to get the COMMAND_PROMPT approach wrong. Do insert character
# sequences such as \u and $(my_func) into PS1. Do *NOT* evaluate them and
# interpolate the results into the PS1, because this opens the door to injection
# errors.
#
# See:
#
# * bash(1)
# * https://wiki.archlinux.org/index.php/Bash/Prompt_customization.
# * https://unix.stackexchange.com/a/247627
set_ps1() {
    local exit="$?"  # grab before executing other code

    # local black="\[$(tput setaf 0)\]"
    local red="\[$(tput setaf 1)\]"
    # local green="\[$(tput setaf 2)\]"
    # local yellow="\[$(tput setaf 3)\]"
    # local blue="\[$(tput setaf 4)\]"
    # local purple="\[$(tput setaf 5)\]"
    local turquoise="\[$(tput setaf 6)\]"
    # local white="\[$(tput setaf 7)\]"
    local reset="\[$(tput sgr0)\]"

    PS1="[${turquoise}\\u${reset}@${turquoise}\\h${reset}:${turquoise}\\W${reset}]"
    if [ "${exit}" != 0 ]; then
        PS1+="[${red}"
        PS1+='rc:$?'
        PS1+="${reset}]"
    fi
    if [ -n "$(git_branch)" ]; then
        PS1+="[${turquoise}"
        PS1+='branch:$(git_branch)'
        PS1+="${reset}]"
    fi
    if [ -n "$(python_virtualenv)" ]; then
        PS1+="[${turquoise}"
        PS1+='venv:$(python_virtualenv)'
        PS1+="${reset}]"
    fi
    PS1+='
$ '
}
PROMPT_COMMAND=set_ps1

export EDITOR="vim"
export EMAIL="jerebear@protonmail.com"
export PAGER=less
export PATH="$PATH:$HOME/.local/bin"

# Update LINES and COLUMNS after each command if needed.
shopt -s checkwinsize
# Append to the history file instead of overwriting it.
shopt -s histappend
