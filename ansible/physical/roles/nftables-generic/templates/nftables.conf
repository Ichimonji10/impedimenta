#!/usr/bin/nft -f
#
# For reference information, see:
#
# * nft(8)
# * /usr/share/nftables/
# * http://wiki.nftables.org/wiki-nftables/index.php/Main_Page
# * `nft describe tcp dport`
{% if 'bittorrent-hosts' in group_names %}
define bittorrent_data = 41046
define bittorrent_dht = 40035
{% endif %}
{% if 'mnemosyne-hosts' in group_names %}
define mnemosyne_sync = 8512
{% endif %}
define syncthing_core_ichimonji10 = 22000
define syncthing_discovery_ichimonji10 = 21027

table inet filter {
  chain input {
    type filter hook input priority 0; policy drop;

    # connection tracker
    ct state {established, related} accept
    ct state invalid drop

    # protocols
    ip protocol icmp accept
    ip6 nexthdr icmpv6 accept
    tcp dport {
{% if 'mnemosyne-hosts' in group_names %}
      $mnemosyne_sync,
{% endif %}
{% if 'servers' in group_names %}
      ssh,
{% endif %}
{% if 'webservers' in group_names %}
      http,
      https,
{% endif %}
      $syncthing_core_ichimonji10,
      bootpc
    } accept
    udp dport {
      $syncthing_discovery_ichimonji10,
      bootpc
    } accept

    # interfaces
    iifname lo accept
{% if 'docker-hosts' in group_names %}
    iifname docker0 accept
{% endif %}
{% if 'vm-hosts' in group_names %}
    iifname br-libvirt counter jump input_br_libvirt
{% endif %}
{% if 'bittorrent-hosts' in group_names %}
    iifname tun0 jump input_tun0
{% endif %}

    # Returning port-unreachable is more polite than `drop`.
    reject with icmp type port-unreachable
  }
  chain forward {
    type filter hook forward priority 0; policy drop;
{% if 'virt-hosts' in group_names %}
    ct state {established, related} accept
    ct state invalid drop
{% endif %}
{% if 'docker-hosts' in group_names %}
    iifname docker0 accept
{% endif %}
{% if 'vm-hosts' in group_names %}
    iifname br-libvirt counter accept
{% endif %}
  }
  chain output {
    type filter hook output priority 0; policy accept;
  }

{% if 'vm-hosts' in group_names %}
  chain input_br_libvirt {
    tcp dport {bootps, domain} accept
    udp dport {bootps, domain} accept
    return
  }
{% endif %}
{% if 'bittorrent-hosts' in group_names %}
  chain input_tun0 {
    tcp dport {$bittorrent_data, $bittorrent_dht} accept
    udp dport {$bittorrent_data, $bittorrent_dht} accept
    return
  }
{% endif %}
}

{% if 'vm-hosts' in group_names %}
# If traffic is being routed out to the virtual libvirt bridge or localhost,
# treat it normally. Otherwise, perform source nat.
table ip nat {
  chain prerouting {
    type nat hook prerouting priority 0;
  }
  chain postrouting {
    type nat hook postrouting priority 0;
    oifname == lo counter return
    oifname == br-libvirt counter return
    counter masquerade
  }
}
{% endif %}

# vim:set ts=2 sw=2 et:
