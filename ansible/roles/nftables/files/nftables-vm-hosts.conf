#!/usr/bin/nft -f
#
# For reference information, see:
#
# * nft(8)
# * /usr/share/nftables/
# * http://wiki.nftables.org/wiki-nftables/index.php/Main_Page
# * `nft describe tcp dport`
#
# Interfaces of interest include:
#
# enp2s0
#     DMZ. The wired PCI-Express network card.
# tun0
#     VPN. Logical.
# br-libvirt
#     Libvirt network. Logical. Libvirt VMs connect to this network, and traffic
#     from this network is routed with source NAT.
define bittorrent_data = 41046
define bittorrent_dht = 40035
define pine_ssh = 30022
define syncthing_core_googoo = 22001
define syncthing_core_ichimonji10 = 22000
define syncthing_discovery_googoo = 21028
define syncthing_discovery_ichimonji10 = 21027

table inet filter {
  chain input {
    type filter hook input priority 0; policy drop;

    # connection tracker
    ct state {established, related} accept
    ct state invalid drop

    # protocols
    ip protocol icmp accept
    ip6 nexthdr icmpv6 accept

    # interfaces
    iifname lo accept
    iifname enp2s0 jump input_enp2s0
    iifname tun0 jump input_tun0
    iifname br-libvirt counter jump input_br_libvirt

    # Returning port-unreachable is more polite than `drop`.
    reject with icmp type port-unreachable
  }
  chain forward {
    type filter hook forward priority 0; policy drop;
    ct state {established, related} accept
    ct state invalid drop
    iifname br-libvirt counter accept
  }
  chain output {
    type filter hook output priority 0; policy accept;
  }

  # Per-interface input chains.
  chain input_enp2s0 {
    udp dport bootpc accept
    tcp dport {
      $pine_ssh,
      $syncthing_core_googoo,
      $syncthing_core_ichimonji10,
      bootpc,
      http,
      https
    } accept
    return
  }
  chain input_tun0 {
    tcp dport $bittorrent_data accept
    tcp dport $bittorrent_dht accept
    udp dport $bittorrent_data accept
    udp dport $bittorrent_dht accept
    return
  }
  chain input_br_libvirt {
    tcp dport bootps accept
    udp dport bootps accept
    tcp dport domain accept
    udp dport domain accept
    return
  }
}

# If traffic is being routed out to the virtual libvirt bridge or localhost,
# treat it normally. Otherwise, perform source nat.
#
# A nice improvement would be to integrate the virtual libvirt network with the
# rest of the network. This would allow other hosts to initiate communications
# with the hosts, and it would allow for fewer mental gymnastics.
table ip nat {
  chain prerouting {
    type nat hook prerouting priority 0;
  }
  chain postrouting {
    type nat hook postrouting priority 0;
    oifname == lo counter return
    oifname == br-libvirt counter return
    counter masquerade
  }
}

# vim:set ts=2 sw=2 et:
