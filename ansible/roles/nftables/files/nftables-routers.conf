#!/usr/bin/nft -f
#
# For reference information, see:
#
# * nft(8)
# * /usr/share/nftables/
# * /etc/services
# * https://wiki.nftables.org/wiki-nftables/index.php/Main_Page
#
# Interfaces of interest include:
#
# enp1s0
#     WAN. Physical, next to the serial port. Clients may initiate certain
#     connections to the DMZ.
# enp2s0
#     LAN. Physical, in the middle. Clients may initiate connections to
#     anywhere.
# enp3s0
#     DMZ. Physical, next to the power plug. Clients may initiate connections to
#     the WAN and certain connections to the DMZ.
# wlp4s0
#     WLAN. Physical. An insecure wireless network. Clients may initiate
#     connections to the WAN.
# wlp4s0_secure
#     WLAN. Logical. A secure wireless network. Clients may initiate
#     communications to anywhere.

table inet filter {
  chain input {
    type filter hook input priority 0; policy drop;

    # connection tracker
    ct state {established, related} accept
    ct state invalid drop

    # protocols
    ip protocol icmp accept
    ip6 nexthdr icmpv6 accept
    tcp dport ssh accept

    # interfaces
    iifname  lo             accept
    iifname  enp1s0         jump    input_enp1s0
    iifname  enp2s0         jump    input_enp2s0
    iifname  enp3s0         jump    input_enp3s0
    iifname  wlp4s0         jump    input_wlp4s0
    iifname  wlp4s0_secure  jump    input_wlp4s0_secure

    # Returning port-unreachable is more polite than `drop`.
    reject with icmp type port-unreachable
  }
  chain forward {
    type filter hook forward priority 0; policy drop;
    ct state {established, related} accept
    ct state invalid drop
    iifname  lo             accept
    iifname  enp1s0         jump    forward_enp1s0
    iifname  enp2s0         accept
    iifname  enp3s0         jump    forward_enp3s0
    iifname  wlp4s0         jump    forward_wlp4s0
    iifname  wlp4s0_secure  accept
  }
  chain output {
    type filter hook output priority 0; policy accept;
  }

  # Per-interface input chains.
  chain input_enp1s0 {
    # The WAN interface is *NOT A DHCP SERVER*! Yes, DHCP clients should listen
    # for traffic. See RFC 2131 section 4.1, and
    # http://stackoverflow.com/questions/1790960/why-dhcp-client-listens-on-port-68
    tcp dport bootpc accept
    udp dport bootpc accept
    return
  }
  chain input_enp2s0 {
    tcp dport bootps accept
    udp dport bootps accept
    tcp dport domain accept
    udp dport domain accept
    return
  }
  chain input_enp3s0 {
    tcp dport bootps accept
    udp dport bootps accept
    tcp dport domain accept
    udp dport domain accept
    return
  }
  chain input_wlp4s0 {
    tcp dport bootps accept
    udp dport bootps accept
    tcp dport domain accept
    udp dport domain accept
    return
  }
  chain input_wlp4s0_secure {
    tcp dport bootps accept
    udp dport bootps accept
    tcp dport domain accept
    udp dport domain accept
    return
  }

  # Per-interface forward chains.
  chain forward_enp1s0 {
    # Also see `table ip nat`.
    oifname enp3s0 jump forward_to_enp3s0
    return
  }
  chain forward_enp3s0 {
    oifname enp1s0 accept
    return
  }
  chain forward_wlp4s0 {
    oifname enp1s0 accept
    oifname enp3s0 jump forward_to_enp3s0
    return
  }
  chain forward_to_enp3s0 {
    tcp dport {
      http,
      https,
      pine-ssh,
      syncthing-core-googoo,
      syncthing-core-ichimonji10
    } accept
  }
}

# See:
#
# * https://wiki.archlinux.org/index.php/Nftables#Masquerading
# * https://wiki.nftables.org/wiki-nftables/index.php/Performing_Network_Address_Translation_(NAT)
#
table ip nat {
  chain prerouting {
    type nat hook prerouting priority 0; policy accept;
    # Traffic from the WAN matches `iifname`, and traffic from elsewhere matches
    # `ip daddr`. The duplication of rules sucks, and the hard-coded public IP
    # sucks even more. It may be possible to deduplicate the rules by creating a
    # new chain, as is done with forward_to_enp3s0. As for the latter issue, see
    # "LINUX Networking Cookbook," by Carla Schroder, section 3.14: "Running
    # Public Services on Private IP Addresses". It might help.
    iifname enp1s0 tcp dport {
      http,
      https,
      pine-ssh,
      syncthing-core-googoo,
      syncthing-core-ichimonji10
    } counter dnat to 192.168.11.2
    ip daddr 174.62.141.80/23 tcp dport {
      http,
      https,
      pine-ssh,
      syncthing-core-googoo,
      syncthing-core-ichimonji10
    } counter dnat to 192.168.11.2
  }
  chain postrouting {
    type nat hook postrouting priority 100; policy accept;
    oifname enp1s0 counter masquerade
  }
}

# vim:set ts=2 sw=2 et:
