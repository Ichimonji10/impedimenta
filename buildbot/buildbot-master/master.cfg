# coding=utf-8
from buildbot.plugins import changes, schedulers, steps, util, worker


cfg = BuildmasterConfig = {}

# The 'workers' list defines the set of recognized workers. Each element is a
# Worker object, specifying a unique worker name and password. The same worker
# name and password must be configured on the worker.
cfg['workers'] = [
    worker.Worker('example-worker', 'pass')
    # worker.LibvirtWorker(
    #     'fedora-27-buildbot-worker-{}'.format(i),
    #     'password',
    #     util.connection('qemu:///system'),
    #     '/var/lib/libvirt/images/fedora-27-buildbot-worker-{}'.format(i),
    #     '/var/lib/libvirt/images/fedora-27-buildbot-worker-base',
    # )
    # for i in range(2)
]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that
# workers could connect to your master with this protocol. 'port' must match
# the value configured into the workers (with their --master option)
cfg['protocols'] = {'pb': {'port': 9989}}

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Here we point to the buildbot version of a python
# hello-world project.
cfg['change_source'] = [changes.GitPoller(
    'git://github.com/buildbot/hello-world.git',
    workdir='gitpoller-workdir',
    branch='master',
    pollinterval=300,
)]

# Configure the Schedulers, which decide how to react to incoming changes. In
# this case, just kick off a 'runtests' build
cfg['schedulers'] = [
    schedulers.SingleBranchScheduler(
        name="all",
        change_filter=util.ChangeFilter(branch='master'),
        treeStableTimer=None,
        builderNames=["runtests"],
    ),
    schedulers.ForceScheduler(name="force", builderNames=["runtests"])
]

# The 'builders' list defines the Builders, which tell Buildbot how to perform
# a build: what steps, and which workers can execute them. Note that any
# particular build will only take place on one worker.
factory = util.BuildFactory()
factory.addStep(steps.Git(
    repourl='git://github.com/buildbot/hello-world.git',
    mode='incremental'
))
factory.addStep(steps.ShellCommand(
    command=["trial", "hello"],
    env={"PYTHONPATH": "."}
))
cfg['builders'] = [util.BuilderConfig(
    name="runtests",
    workernames=["example-worker"],
    factory=factory,
)]

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.
cfg['services'] = []

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').
cfg['title'] = "Hello World CI"
cfg['titleURL'] = "https://buildbot.github.io/hello-world/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.
cfg['buildbotURL'] = "http://localhost:8010/"

# minimalistic config to activate new web UI
cfg['www'] = {
    'port': 8010,
    'plugins': {'waterfall_view': {}, 'console_view': {}, 'grid_view': {}},
}

# This specifies what database buildbot uses to store its state. You can leave
# this at its default for all but the largest installations.
cfg['db'] = {'db_url': "sqlite:///state.sqlite"}

# vim: set ft=python et:
