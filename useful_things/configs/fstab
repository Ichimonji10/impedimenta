# Issue `ls -l /dev/disk/by-uuid` or `lsblk -o +UUID` to see what the UUIDs
# correspond to.
UUID=...  /           ext4  rw,relatime,data=ordered  0  1
UUID=...  /mnt/data1  ext4  defaults                  0  2
UUID=...  /mnt/data2  ext4  defaults                  0  2
UUID=...  none        swap  defaults                  0  2

# /mnt/data1 is a striped raid array, and it is therefore especially likely to
# experience a failure. How can we take advantage of it's speed yet also have
# some protection against data loss?
#
# * Use rsync (with the --delete option) and cron to push data from /mnt/data1
#   to /mnt/data2 on a regular basis.
# * Use "bind mounts" to make /mnt/data1 subdirectories available on the root
#   filesystem at various points. If /mnt/data1 experiences issues, change the
#   bind mounts to /mnt/data2 and issue `mount -a`.
#
# Why use bind mounts? Aren't symlinks simpler?
#
# * Certain appliations don't play well with symlinks. For example, vsftpd won't
#   follow symlinks.
# * Bind mounts allow for centralization of responsiblities. If a disk fails,
#   it's easier to edit /etc/fstab than to hunt through the filesystem for
#   symlinks.
#
# Why bother having both /mnt/data1 and /mnt/data2? Why not just create a RAID 5
# array, or something similar? Manually logging in, tweaking this file, and
# re-mounting disks in case of hardware failure is excessive.
#
# * True, such a procedure is excessive. However, it's wasteful to create a RAID
#   5 array with two 640 GB drives and one 1 TB drive, and storage space is more
#   important to me than awesome uptime.
/mnt/data1/http         /srv/http             none  bind  0  0
/mnt/data1/ichimonji10  /srv/ftp/ichimonji10  none  bind  0  0
/mnt/data1/upload       /srv/ftp/upload       none  bind  0  0
