" Other Settings
" ==============
" Do not emulate vi.
set nocompatible
" If a line exceeds the width of the viewport, don't wrap it.
set nowrap
" e.g. allows me to backspace in insert mode.
set backspace=2
" Buffer between cursor and top+bottom edge of viewport.
set scrolloff=2

" Status Indicators
" =================
" Highlight the current row?
set cursorline
" Always show the status line.
set laststatus=2
" Display relative line numbers.
set rnu
" Show cursor position in status bar.
set ruler
" Show partial commands.
set showcmd

" Syntax Highlighting
" ===================
syntax enable
set t_Co=256
color badwolf

" Undo Tree
" =========
" Remember to create this directory, as it is NOT automatically created.
set undodir=~/.vim/undo
" Should the undo tree be saved? Allows for persistent undos.
set undofile

" Searching
" =========
" When searching, should the cursor move through the file to the current match
" as you type?
set incsearch
" Ignore case when searching...
set ignorecase
" ...except when I use caps in a search term.
set smartcase

" Folding
" =======
" Should code be folded by default?
set nofoldenable
" How should code be folded?
set foldmethod=indent
" When a file is read, should all folds automatically be opened? `*` matches all
" files, and `normal` tells vim to execute the following command in normal mode
" (as opposed to prepending the command with a `:`).
"autocmd BufRead * normal zR

" Line Width
" ==========
" If a line exceeds this width, break it into multiple lines. Do so at a
" whitespace boundary.
set textwidth=80
" Keep current indentation level when starting new line
set autoindent

" Tabbing
" =======
" What is the apparent width of the tab character?
set tabstop=4
" When the tab key is pressed, should it be expanded to spaces?
set expandtab
" How many spaces should be inserted when indenting or retabbing?
set shiftwidth=4

" Key Bindings
" ============
" What key should 'leader' be mapped to?
let mapleader=","
" Shortcuts.
nmap <F5> :tabprev<CR>
nmap <F6> :tabnew<CR>
nmap <F7> :!ctags -R -o ~/.mytags ~/code<CR>
nmap <F8> :tabnext<CR>
nmap <F9> :NERDTreeToggle<CR>
nmap <F10> :UndotreeToggle<CR>
nmap <F12> :TagbarToggle<CR>
" Where should vim look for the tags that exuberant ctags generates?
set tags=~/.mytags
" Allows e.g. ruby method name `has_key?` to be looked up.
set iskeyword+=?
" Force users to use hjkl instead of arrow keys.
nnoremap <up> <nop>
nnoremap <right> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
