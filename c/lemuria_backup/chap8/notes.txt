When using redirection, you are not opening a file from within a program. Rather, you are redirecting stdin and/or stdout.
While stdin is, by default, the keyboard, you can use redirection to change stdin to be a file.
Similarly, while stdout is normally the terminal/monitor, you can use redirection to change stdout to a file.
Stdin and stdout are input and output streams which programs connect to and the operating system provides.
The three types of standard data streams are stdin, stdout, and stderr. By default, Unix and all(?) other modern OS's connect a program to stdin, stdout, and stderr.
When using *nix redirection, there are two symbols that are commonly used. The > redirects output, and the < redirects input.
Suppose that you wanted to take one file and append it to the end of another file.
One way to do that is as such:			echo_eof < words >> words2
You could also issue this command: 		echo_eof >> words2 < words
Or, I could just create an entirely new file: 	echo_eof < words > words3
I could overwrite words2: 			echo_eof < words > words2
I could NOT write output to two files at once: 	echo_eof < words > words2 > words3	<--RONG
I could even do crazy stuff like this:		cat /etc/passwd | grep ichimonji10 > test2.txt

Conversion specifiers like %d and %f automatically skip leading whitespace while looking for something to convert.
This means that the format strings "%d %d" and "%d%d" act exactly the same--the whitespace in the first format string causes whitespace to be skipped before the second %d, but the second %d would have skipped that whitespace anyway.
(Yet another scanf foible is that the innocuous-looking format string "%d\n" converts a number and then skips whitespace, which means that it will gobble up not only a newline following the number it converts, but any number of newlines or whitespace, and in fact it will keep reading until it finds a non-whitespace character, which it then won't read.
This sounds confusing, but so is scanf's behavior when given a format string like "%d\n". The moral is simple: don't use trailing \n's in scanf format strings.)
